include <iostream>  

 

 

#include <string>  

 

 

   

 

 

class IndexOutOfBounds {  

 

 

public:  

 

 

    const char* what() const {  

 

 

        return "Index out of bounds";  

 

 

    }  

 

 

};  

 

 

   

 

 

class GameEntry {  

 

 

public:  

 

 

    GameEntry(const std::string& n = "", int s = 0);  

 

 

    std::string getName() const;  

 

 

    int getScore() const;  

 

 

   

 

 

private:  

 

 

    std::string name;  

 

 

    int score;  

 

 

};  

 

 

   

 

 

GameEntry::GameEntry(const std::string& n, int s) : name(n), score(s) { }  

 

 

   

 

 

std::string GameEntry::getName() const {  

 

 

    return name;  

 

 

}  

 

 

   

 

 

int GameEntry::getScore() const {  

 

 

    return score;  

 

 

}  

 

 

   

 

 

class Scores {  

 

 

public:  

 

 

    Scores(int maxEnt = 10);  

 

 

    ~Scores();  

 

 

    void add(const GameEntry& e);  

 

 

    GameEntry remove(int i);  

 

 

   

 

 

private:  

 

 

    int maxEntries;  

 

 

    int numEntries;  

 

 

    GameEntry* entries;  

 

 

};  

 

 

   

 

 

Scores::Scores(int maxEnt) {  

 

 

    maxEntries = maxEnt;  

 

 

    entries = new GameEntry[maxEntries];  

 

 

    numEntries = 0;  

 

 

}  

 

 

   

 

 

Scores::~Scores() {  

 

 

    delete[] entries;  

 

 

}  

 

 

   

 

 

void Scores::add(const GameEntry& e) {  

 

 

    int newScore = e.getScore();  

 

 

   

 

 

    if (numEntries == maxEntries) {  

 

 

        if (newScore <= entries[maxEntries - 1].getScore())  

 

 

            return;  

 

 

    } else {  

 

 

        numEntries++;  

 

 

    }  

 

 

   

 

 

    int i = numEntries - 2;  

 

 

   

 

 

    while (i >= 0 && newScore > entries[i].getScore()) {  

 

 

        entries[i + 1] = entries[i];  

 

 

        i--;  

 

 

    }  

 

 

   

 

 

    entries[i + 1] = e;  

 

 

}  

 

 

   

 

 

GameEntry Scores::remove(int i) {  

 

 

    if (i < 0 || i >= numEntries) {  

 

 

        std::cerr << "Error: " << IndexOutOfBounds().what() << std::endl;  

 

 

        // You can handle the error here or exit the program.  

 

 

        // For simplicity, the program exits in case of an error.  

 

 

        exit(EXIT_FAILURE);  

 

 

    }  

 

 

   

 

 

    GameEntry e = entries[i];  

 

 

   

 

 

    for (int j = i + 1; j < numEntries; j++) {  

 

 

        entries[j - 1] = entries[j];  

 

 

    }  

 

 

   

 

 

    numEntries--;  

 

 

   

 

 

    return e;  

 

 

}  

 

 

   

 

 

int main() {  

 

 

      

 

 

    Scores scores(5);  

 

 

   

 

 

    scores.add(GameEntry("Player1", 20));  

 

 

    scores.add(GameEntry("Player2", 75));  

 

 

    scores.add(GameEntry("Player3", 120));  

 

 

   

 

 

      

 

 

    for (int i = 0; i < scores.numEntries; ++i) {  

 

 

        std::cout << scores.remove(i).getName() << std::endl;  

 

 

    }  

 

 

   

 

 

    return 0;  

 

 

} 

 
